#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers
source psql.sh

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url="/"
admin=$YNH_APP_ARG_ADMIN
admin_email=$(ynh_user_get_info $admin 'mail')
admin_name=$(ynh_user_get_info $admin 'firstname')
admin_pass_reset_url=""
is_public=$YNH_APP_ARG_IS_PUBLIC
random_key=$(ynh_random 64)
name=$YNH_APP_ARG_NAME
registration=$YNH_APP_ARG_REGISTRATION
cache=$YNH_APP_ARG_CACHE
size=$YNH_APP_ARG_SIZE

# This is a multi-instance app, meaning it can be installed several times independently
# The id of the app as stated in the manifest is available as $YNH_APP_ID
# The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2", ...)
# The app instance name is available as $YNH_APP_INSTANCE_NAME
#    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
#    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
#    - ynhexample__{N} for the subsequent installations, with N=3,4, ...
# The app instance name is probably what you are interested the most, since this is
# guaranteed to be unique. This is a good unique identifier to define installation path,
# db names, ...
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Check web path availability
ynh_webpath_available "$domain" "$path_url"
# Register (book) web path
ynh_webpath_register "$app" "$domain" "$path_url"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set "$app" domain       "$domain"
ynh_app_setting_set "$app" admin_email  "$admin_email"
ynh_app_setting_set "$app" is_public    "$is_public"
ynh_app_setting_set "$app" random_key   "$random_key"
ynh_app_setting_set "$app" admin        "$admin"
ynh_app_setting_set "$app" name         "$name"
ynh_app_setting_set "$app" registration "$registration"
ynh_app_setting_set "$app" cache        "$cache"
ynh_app_setting_set "$app" size         "$size"
ynh_app_setting_set "$app" admin_name   "$admin_name"

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================

# Find a free port
port=$(ynh_find_port 4000)

# Open this port
yunohost firewall allow Both "$port" 2>&1
ynh_app_setting_set "$app" port "$port"

#=================================================
# INSTALL DEPENDENCIES
#=================================================

# Add erlang for Debian Jessie 

if [ "$(lsb_release --codename --short)" == "jessie" ]; then
	echo "deb http://packages.erlang-solutions.com/debian jessie contrib" | tee /etc/apt/sources.list.d/erlang-solutions.list
elif 
	[ "$(lsb_release --codename --short)" == "stretch" ]; then
	echo "deb http://packages.erlang-solutions.com/debian stretch contrib" | tee /etc/apt/sources.list.d/erlang-solutions.list
fi
sudo wget https://packages.erlang-solutions.com/debian/erlang_solutions.asc
sudo apt-key add erlang_solutions.asc
sudo rm erlang_solutions.asc

# install dependencies
ynh_install_app_dependencies git build-essential postgresql postgresql-contrib openssl g++ apt-transport-https erlang-inets elixir erlang-dev erlang-parsetools erlang-xmerl erlang-tools

#=================================================
# DATABASE SETUP
#=================================================

# Create postgresql database
db_name="${app}"
db_pwd=$(ynh_string_random 30)
ynh_app_setting_set "$app" psql_db "$db_name"
ynh_app_setting_set "$app" psqlpwd "$db_pwd"
ynh_psql_test_if_first_run
ynh_psql_create_user "$app" "$db_pwd"
ynh_psql_execute_as_root \
"ALTER USER $app WITH SUPERUSER;"
ynh_psql_execute_as_root \
"CREATE DATABASE $db_name ENCODING 'UTF8' LC_COLLATE='C' LC_CTYPE='C' template=template0 OWNER $app;"
ynh_psql_execute_as_root "\connect $db_name 
CREATE EXTENSION IF NOT EXISTS unaccent;CREATE EXTENSION IF NOT EXISTS pg_trgm;"
ynh_psql_execute_as_root "\connect $db_name 
CREATE EXTENSION IF NOT EXISTS unaccent;CREATE EXTENSION IF NOT EXISTS citext;"

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create "$app" "$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK PLEROMA SOURCE
#=================================================

ynh_app_setting_set "$app" final_path "$final_path"
# Download, check integrity, uncompress and patch the source from app.src
git clone https://git.pleroma.social/pleroma/pleroma "$final_path/$app"


#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config
if [ $cache -eq 1 ]
then
	cp -rf "../conf/cache.conf" "/etc/nginx/conf.d/$app-cache.conf"
	ynh_replace_string "{APP}"    "$app"  "/etc/nginx/conf.d/$app-cache.conf"
	ynh_replace_string "__SIZE__" "$size" "/etc/nginx/conf.d/$app-cache.conf"
	ynh_store_file_checksum "/etc/nginx/conf.d/$app-cache.conf"
	ynh_replace_string  "{APP}"     "$app"  "../conf/media.conf"
	ynh_replace_string  "__PORT__"  "$port" "../conf/media.conf"
	sudo su -c "cat ../conf/media.conf >> /etc/nginx/conf.d/$domain.d/$app.conf"
	ynh_store_file_checksum "/etc/nginx/conf.d/$domain.d/$app.conf"
fi

#=================================================
# MODIFY A CONFIG FILE
#=================================================
cp -f ../conf/prod.secret.exs "$final_path/$app/config/prod.secret.exs"
cp -f ../conf/setup_db.psql "$final_path/$app/config/setup_db.psql"

ynh_replace_string "__DOMAIN__"        "$domain"        "$final_path/$app/config/prod.secret.exs"
ynh_replace_string "__KEY__"           "$random_key"    "$final_path/$app/config/prod.secret.exs"
ynh_replace_string "__INSTANCE_NAME__" "$name"          "$final_path/$app/config/prod.secret.exs"
ynh_replace_string "__DB_NAME__"       "$app"           "$final_path/$app/config/prod.secret.exs"
ynh_replace_string "__DB_PWD__"        "$db_pwd"        "$final_path/$app/config/prod.secret.exs"
ynh_replace_string "__ADMIN_EMAIL__"   "$admin_email"   "$final_path/$app/config/prod.secret.exs"
ynh_replace_string "__PORT__"          "$port"          "$final_path/$app/config/prod.secret.exs"
ynh_replace_string "__DB_NAME__"       "$app"           "$final_path/$app/config/setup_db.psql"
ynh_replace_string "__DB_PWD__"        "$db_pwd"        "$final_path/$app/config/setup_db.psql"
if [ $cache -eq 1 ]
then
	ynh_replace_string "__MEDIA_CACHE__"    "true"        "$final_path/$app/config/prod.secret.exs"
else
	ynh_replace_string "__MEDIA_CACHE__"    "false"        "$final_path/$app/config/prod.secret.exs"
fi

#  Set registrations open/closed
if [ $registration -eq 1 ]
then
 ynh_replace_string "__REG__" "true"  "$final_path/$app/config/prod.secret.exs"
else
 ynh_replace_string "__REG__" "false" "$final_path/$app/config/prod.secret.exs"
fi


#=================================================
# SETUP
#=================================================
# Give permisiion to the final_path
chown -R "$app":"$app" "$final_path"
# App setup and db migration
( cd $final_path/$app && sudo -u "$app" MIX_ENV=prod mix local.hex --force )
( cd $final_path/$app && sudo -u "$app" MIX_ENV=prod mix local.rebar --force )
( cd $final_path/$app && sudo -u "$app" mix deps.get )
( cd $final_path/$app && sudo -u "$app" MIX_ENV=prod mix ecto.migrate --force )
# Add user
( cd $final_path/$app && sudo -u "$app" MIX_ENV=prod mix pleroma.user new "$admin" "$admin_email" )
# Make user moderator
( cd $final_path/$app && sudo -u "$app" MIX_ENV=prod mix pleroma.user set "$admin" --moderator )
# Make user admin
( cd $final_path/$app && sudo -u "$app" MIX_ENV=prod mix pleroma.user set "$admin" --admin )
# Retrieve a password reset link that you can then send to the user
admin_pass_reset_url=( cd $final_path/$app && sudo -u "$app" MIX_ENV=prod mix pleroma.user reset_password "$admin" )

#=================================================
# SETUP SSOWAT
#=================================================

if [ "$is_public" -eq 0 ]
then	# Remove the public access
	ynh_app_setting_delete "$app" skipped_uris
fi
# Make app public if necessary
if [ "$is_public" -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set "$app" unprotected_uris "/"
fi

# Give permisiion to the final_path
chown -R "$app":"$app" "$final_path"

# Create a dedicated systemd config
ynh_add_systemd_config
systemctl enable "$app"
systemctl start "$app"
sleep 30
#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx

#=================================================
# SEND A README FOR THE ADMIN
#=================================================

message=" $app was successfully installed :)
Please open your $app domain: https://$domain$path_url

The moderator username is: $admin
To reset your password: $admin_pass_reset_url

If you are facing any problem or want to improve this app, please open a new issue here: https://github.com/YunoHost-Apps/pleroma_ynh/
If you are not afraid of the terminal, check out https://git.pleroma.social/pleroma/pleroma/wikis/home to see what more you can do with your awesome instance!"

ynh_send_readme_to_admin "$message" "$admin"
