#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_package_version
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
admin_email=$(ynh_app_setting_get --app=$app --key=admin_email)
random_key=$(ynh_app_setting_get --app=$app --key=random_key)
name=$(ynh_app_setting_get --app=$app --key=name)
port=$(ynh_app_setting_get --app=$app --key=port)
db_user=$(ynh_app_setting_get --app=$app --key=db_user)
db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)
cache=$(ynh_app_setting_get --app=$app --key=cache)
size=$(ynh_app_setting_get --app=$app --key=size)
registration=$(ynh_app_setting_get --app=$app --key=registration)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	ynh_clean_check_starting
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

#Switch variables name
psql_db=$(ynh_app_setting_get --app=$app --key=psql_db)

if [ -n "$psql_db" ]
then
    db_name=$(ynh_app_setting_get --app=$app --key=psql_db)
    db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)
    ynh_app_setting_set --app=$app --key=db_name --value=$db_name
    ynh_app_setting_set --app=$app --key=db_pwd --value=$db_pwd
	ynh_app_setting_delete --app=$app --key=psql_db
	ynh_app_setting_delete --app=$app --key=psqlpwd
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

#=================================================
# CHECK VERSION NUMBER
#=================================================
ynh_script_progression --message="Checking version number..."

if [ ${PACKAGE_CHECK_EXEC:-0} -eq 1 ]; then
  sleep 60
fi
abort_if_up_to_date
# previous function is what defines 'version', more precisely the 'previous version'
previous_version="${version}"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..."

ynh_systemd_action --service_name=$app --action="stop" --log_path=systemd --line_match="Stopped $app"

if ynh_version_gt "${previous_version}" "1.1.1~ynh1"  ; then
	pkill -u $app
fi

#=================================================
# UPGRADE TO OTP RELEASE
#=================================================

if ynh_version_gt "1.1.1~ynh1" "${previous_version}" ; then
	ynh_script_progression --message="Upgrading to OTP release..."

	# Define app's data directory
	datadir="/home/yunohost.app/${app}"
	ynh_app_setting_set --app=$app --key=datadir --value="$datadir"

	# Create app folders
	mkdir -p "$datadir/"
	mkdir -p "$datadir/uploads/"
	mkdir -p "$datadir/static/"
	mkdir -p "$datadir/static/emoji/"

	# Give permission to the datadir
	chown -R "$app":"$app" "$datadir"

	rsync -a "$final_path/$app/uploads/" "$datadir/uploads/"
	if [ -d "$final_path/$app/instance/static/" ]; then
		rsync -a "$final_path/$app/instance/static/" "$datadir/static/"
	fi

	rsync -a "$final_path/$app/priv/static/emoji/" "$datadir/static/emoji/"

	mkdir -p /etc/$app
	chown -R $app /etc/$app
	config="/etc/$app/config.exs"
	mv $final_path/$app/config/prod.secret.exs $config
	ynh_replace_string --match_string="use Mix.Config" --replace_string="import Config" --target_file="$config"
	echo "config :pleroma, :instance, static_dir: \"/home/yunohost.app/$app/static\"" >> $config
	echo "config :pleroma, Pleroma.Uploaders.Local, uploads: \"/home/yunohost.app/$app/uploads\"" >> $config

	ynh_backup_if_checksum_is_different --file="$config"

	ynh_secure_remove --file="$final_path/$app"
fi

if ynh_version_gt "2.0.5~ynh1" "${previous_version}" ; then
	config="/etc/$app/config.exs"
	cat "../conf/ldap.exs" >> "$config"
	ynh_replace_string --match_string="config :pleroma, configurable_from_database: false" --replace_string="config :pleroma, configurable_from_database: true" --target_file="$config"
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	# Download, check integrity, uncompress and patch the source from app.src
	architecture=$(ynh_detect_arch)
	ynh_setup_source --dest_dir="$final_path/$app" --source_id=$architecture
fi

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config

ynh_secure_remove --file="/etc/nginx/conf.d/$app-cache.conf"
if [ $cache -eq 1 ]
then
	cp -rf "../conf/cache.conf" "/etc/nginx/conf.d/$app-cache.conf"
	ynh_replace_string --match_string="{APP}" --replace_string="$app" --target_file="/etc/nginx/conf.d/$app-cache.conf"
	ynh_replace_string --match_string="__SIZE__" --replace_string="$size" --target_file="/etc/nginx/conf.d/$app-cache.conf"
	ynh_store_file_checksum --file="/etc/nginx/conf.d/$app-cache.conf"
	ynh_replace_string --match_string="{APP}" --replace_string="$app" --target_file="../conf/media.conf"
	ynh_replace_string --match_string="__PORT__" --replace_string="$port" --target_file="../conf/media.conf"
	cat ../conf/media.conf >> /etc/nginx/conf.d/$domain.d/$app.conf
	ynh_store_file_checksum --file="/etc/nginx/conf.d/$domain.d/$app.conf"
fi

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# SPECIFIC UPGRADE
#=================================================
# MODIFY A CONFIG FILE
#=================================================
ynh_script_progression --message="Modifying a config file..."

config="/etc/$app/config.exs"

ynh_backup_if_checksum_is_different --file="$config"

#=================================================
# MAKE UPGRADE
#=================================================
ynh_script_progression --message="Making upgrade..."

# Give permission to the final_path
chown -R $app: "$final_path"

pushd $final_path/$app
    su "$app" -s $SHELL -lc "$final_path/$app/bin/pleroma_ctl migrate"
popd

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================
ynh_script_progression --message="Storing the config file checksum..."

# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$config"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..."

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add $app --description "$app daemon for Pleroma" --log_path=systemd

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..."

ynh_systemd_action --service_name=$app --action="start" --log_path=systemd --line_match="Started $app"
if [ ${PACKAGE_CHECK_EXEC:-0} -eq 1 ]; then
	sleep 60
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed"
