#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# CHECK VERSION NUMBER
#=================================================
ynh_script_progression --message="Checking version number..." --weight=1

if [ ${PACKAGE_CHECK_EXEC:-0} -eq 1 ]; then
  sleep 60
fi
abort_if_up_to_date
# previous function is what defines 'version', more precisely the 'previous version'
previous_version="${version}"

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="stop" --log_path=systemd --line_match="Stopped $app"

if ynh_version_gt "${previous_version}" "1.1.1~ynh1"  ; then
	pkill -u $app || true
fi

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# Remove old repository
ynh_secure_remove --file="/etc/apt/sources.list.d/erlang-solutions.list"
apt-key del A14F4FCA

# Switch to $install_dir/live
if [ ! -d "$install_dir/live" ]; then
	mv $install_dir/$app $install_dir/live
fi

#=================================================
# UPGRADE TO OTP RELEASE
#=================================================

config="/etc/$app/config.exs"
if ynh_version_gt "1.1.1~ynh1" "${previous_version}" ; then
	ynh_script_progression --message="Upgrading to OTP release..." --weight=1

	rsync -a "$install_dir/live/uploads/" "$data_dir/uploads/"
	if [ -d "$install_dir/live/instance/static/" ]; then
		rsync -a "$install_dir/live/instance/static/" "$data_dir/static/"
	fi

	rsync -a "$install_dir/live/priv/static/emoji/" "$data_dir/static/emoji/"

	mkdir -p /etc/$app
	chown -R $app /etc/$app
	mv $install_dir/live/config/prod.secret.exs $config
	ynh_replace_string --match_string="use Mix.Config" --replace_string="import Config" --target_file="$config"
	echo "config :pleroma, :instance, static_dir: \"/home/yunohost.app/$app/static\"" >> $config
	echo "config :pleroma, Pleroma.Uploaders.Local, uploads: \"/home/yunohost.app/$app/uploads\"" >> $config

	ynh_backup_if_checksum_is_different --file="$config"

	ynh_secure_remove --file="$install_dir/live"
fi

if ynh_version_gt "2.0.5~ynh1" "${previous_version}" ; then
	cat "../conf/ldap.exs" >> "$config"
	ynh_replace_string --match_string="config :pleroma, configurable_from_database: false" --replace_string="config :pleroma, configurable_from_database: true" --target_file="$config"
fi

if ynh_version_gt "2.4.4~ynh2" "${previous_version}"; then
	registration_bool_value=`(($registration)) && echo "true" || echo "false"`
	ynh_replace_string --match_string='registrations_open: true' --replace_string="registrations_open: $registration_bool_value" --target_file="$config"
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	ynh_secure_remove --file="$install_dir/live"
	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$install_dir/live"
fi

chmod -R o-rwx "$install_dir"
chown -R $app:$app "$install_dir"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

if [ $cache -eq 1 ]
then
	ynh_add_config --template="../conf/cache.conf" --destination="/etc/nginx/conf.d/$app-cache.conf"

	cat ../conf/media.conf >> ../conf/nginx.conf
fi

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# MAKE UPGRADE
#=================================================
ynh_script_progression --message="Making upgrade..." --weight=1

pushd $install_dir/live
	ynh_exec_warn_less ynh_exec_as $app -s $SHELL -lc "$install_dir/live/bin/pleroma_ctl migrate"
popd

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..." --weight=1

ynh_backup_if_checksum_is_different --file="/etc/$app/config.exs"

chmod 400 "/etc/$app/config.exs"
chown $app:$app "/etc/$app/config.exs"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..." --weight=1

yunohost service add $app --description="$app daemon for Pleroma"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="start" --log_path=systemd --line_match="Access Pleroma.Web.Endpoint"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
